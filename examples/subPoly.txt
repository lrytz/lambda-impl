let ho: ((g: Nat ->!e! Nat) ->!! Nat ->[g] Nat) ->!e! Nat =
  (f: (g: Nat ->!e! Nat) ->!! Nat ->[g] Nat) -> f ((x: Nat) -> x) 0 in


let f1: (g: Nat ->!! Nat) ->!! Nat ->[g] Nat =
  (g: Nat ->!! Nat) -> (x: Nat) ->[g] g x                        in

let f2: (g: Nat ->!e,k! Nat) ->!! Nat ->[g] Nat =
  (g: Nat ->!e,k! Nat) -> (x: Nat) ->[g] g x                     in

let f3: (g: Nat ->!e! Nat) ->!! Nat ->[g] Nat =
  (g: Nat ->!e! Nat) -> (x: Nat) ->[g] g x                       in


// - applying ho to f1 would be unsound. in the body of ho, we assume that f accepts a function with effect e
// - applying ho to f2 is OK:
//    - it accepts a function with a greater effect, so it is better
//    - since it's effect polymorphic, that greater effect only appears if something with a greater effect is
//      put in. but this cannot happen in ho - there only the small effect can be put in. so it's sound.
// - applying ho to f3 is obviously OK, it has the same type as the argument

ho f2
