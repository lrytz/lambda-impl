let comp: (f: Nat -> Nat) ->!! (g: Nat -> Nat) ->!! (Nat ->[f g] Nat) =
  (m: Nat -> Nat) -> (n: Nat -> Nat) -> ((x: Nat) ->[m n] n (m x)) in

let f1: Nat ->!e1! Nat = (x: Nat) -> succ x in
let f2: Nat ->!e2! Nat = (x: Nat) -> succ x in

(comp f1 f2) 0
