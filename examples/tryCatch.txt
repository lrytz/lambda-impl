/*
for these examples:
 - we don't have (Unit -> Nat), so we use (Bool -> Nat)
 - we don't have exception types, so we use Nat as exception type

with current language
  let try: (b: Bool -> Nat) ->!! (h: Nat -> Nat) ->[b h] Nat = ... in

with masking expressions
  let try: (b: Bool -> Nat) ->!! (h: Nat -> Nat) ->[(b \ throw) h] Nat = ... in

in scala
  def try(b: => Int, h: Exception => Int): Int @mask(like(b), throws) @like(h)


once we have try, can we write myTry?
  let myTry: (b: Bool -> Nat) ->!! (h: Nat -> Nat) ->[(b \ throws) h] Nat =
    (b: Bool -> Nat) ->!! (h: Nat -> Nat) ->[(b \ throws) h] try b h
  
*/
